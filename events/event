#ifndef EVENT_H_INCLUDED
#define EVENT_H_INCLUDED

#include "handlerbase"
#include "notimpl.h"

///
/// Event class.
///
template <typename... Args>
class Event
{
private: // Typedefs
    /// The handlers vector
    typedef std::vector<Handler<Args...>*> HandlersVector;

public: // Constructors and destructor
    /// Destructor.
    ~Event()
    {
        for (auto it : _handlers)
            delete it;
    }

public: // New functions
    /// Registers a new handler
    Event<Args...>& operator +=(Handler<Args...>* handler)
    {
        _handlers.push_back(handler);
        return *this;
    }
    /// Removes a handler from the list.
    Event<Args...>& operator -=(Handler<Args...>* handler)
    {
        throw new NotImplException;
        return *this;
    }

    /// Raise an event.
    /// All handlers will be called.
    void Call(Args... args)
    {
        for(auto& it : _handlers)
        {
            it->Call(args...);
        }
    }

    /// Raise an event.
    /// Synonym to Call, calls all handlers.
    inline void operator()(Args... args)
    {
        this->Call(args...);
    }

private:
    HandlersVector _handlers;
};

#endif // EVENT_H_INCLUDED
