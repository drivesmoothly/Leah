#ifndef EVENT_H_INCLUDED
#define EVENT_H_INCLUDED

#include <memory>
#include "handlerbase"
#include "notimpl.h"

///
/// Event class.
///
template <typename... Args>
class Event
{
private: // Typedefs
    /// The self type
    typedef Event<Args...> SelfType;
    typedef Handler<Args...> HandlerType;

public: // Constructors and destructor
    /// Destructor.
    ~Event()
    {
        // No implementation required.
        // The handler will clean itself up.
    }

public: // New functions
    /// Registers a new handler
    inline SelfType& operator +=(typename HandlerType::HandlerObjectType handler)
    {
        if (_handler)
        {
            (*_handler) += handler;
        }
        else
        {
            _handler = handler;
        }
        return *this;
    }

    /// Removes a handler from the list.
    inline SelfType& operator -=(typename HandlerType::HandlerObjectType handler)
    {
        throw new NotImplException;
        return *this;
    }

    /// Raise an event.
    /// All handlers will be called.
    inline void Raise(Args... args)
    {
        if (_handler)
        {
            _handler->Call(args...);
        }
    }

    /// Raise an event.
    /// Synonym to Raise, calls all handlers.
    inline void operator()(Args... args)
    {
        this->Raise(args...);
    }

private: // Data
    /// Stores the handler
    typename HandlerType::HandlerObjectType _handler;
};

#endif // EVENT_H_INCLUDED
