#ifndef MEMBERFUNCTIONHANDLER_H_INCLUDED
#define MEMBERFUNCTIONHANDLER_H_INCLUDED

#include "handlerbase"

///
/// Member function handler base class
///
class MethodHandler : public Handler
{
private: // Data types
    typedef void (MethodHandler::*MemberFunctionType)();

public: // New functions
    ///
    /// Retrieves the object on which the method will be called.
    ///
    virtual void* GetObjectPtr() = 0;
    ///
    /// Retrieves the pointer to the method that will be called.
    ///
    virtual MemberFunctionType GetMethodPtr() = 0;

public: // From base classes
    ///
    /// From Handler base class.
    ///
    void Accept(HandlerVisitor& visitor)
    {
        visitor.Visit(*this);
    }
};

///
/// Member function handler
///
template <class C, typename... Args>
class MethodHandler : public MethodHandler
{
public: // Data types
    typedef void (C::*Method)(Args...);

public: // Constructors and destructor
    ///
    /// Constructor.
    /// Takes a reference to the object and a pointer to the member function.
    ///
    MethodHandler(C& owner, Method method) : _owner(&owner), _method(method) {};

public: // New functions
    ///
    /// Calls the handler with the given arguments.
    /// @args args The arguments that will be passed to the handler method.
    ///
    inline void Call(Args... args)
    {
        (_owner->*_method)(args...);
    }

public: // From base classes
    ///
    /// From MethodHandlerBase, GetObjectPtr.
    ///
    void* GetObjectPtr()
    {
        return _owner;
    }
    ///
    /// From MethodHandler, GetMethodPtr
    ///
    typename MethodHandler::MemberFunction GetMethodPtr()
    {
        return (typename MethodHandlerBase::MemberFunction)_method;
    }

private: // Data
    /// The object on which the method will be called.
    C* _owner;
    /// The method that will be called.
    Method _method;
};

template <typename C, typename... Args>
MethodHandler<C, Args...>* newHandler(C& owner, void (C::*method)(Args...))
{
    return new MethodHandler<C, Args...>(owner, method);
}

#endif // MEMBERFUNCTIONHANDLER_H_INCLUDED
